######R como herramienta de Sistema de Informaci?n Geografica - RGIS
###presentado por: Freddy Lopez, Ing.
###fecha: Septiembre 7,2020 
##e-mail:fre.lopez.sol@gmail.com   cel:(+593) 979879617
##e-mail Rprocess Express:rprocess.exp@gmail.com
##facebook Rprocess Express: https://www.facebook.com/Rprocess.express

setwd("direccion_de_carpeta_de_trabajo")

####Ejemplo 0: Descargar data desde R
{
  ####a)No requiere registro
  {
    ##Help:
    link<-"ftp://ftp.emc.ncep.noaa.gov/cmb/sst/oimonth_v2/GRIB/oiv2mon.201806.grb"
    try(download.file(url= link,"sst201806.grb",quiet = F,method = "auto",mode="wb"))
    r<-raster("sst201806.grb")
    plot(r)
    map("world2",add=T)
    #loop to download multiple files
    name<-c("201806",
            "201807",
            "201809",
            "202007")
    
    for (i in 1:length(name))
    {
      link<-paste0("ftp://ftp.emc.ncep.noaa.gov/cmb/sst/oimonth_v2/GRIB/oiv2mon.",name[i],".grb")
      try(download.file(url= link,paste0("sst",name[i],".grb"),quiet = F,method = "auto",mode="wb"))
    }
  }
  
  
  ####b)Requiere registro
  {
    link<-"ftp://user:password@my.cmems-du.eu/Core/GLOBAL_REANALYSIS_PHY_001_030/global-reanalysis-phy-001-030-monthly/2016/mercatorglorys12v1_gl12_mean_201612.nc"
    try(download.file(url= link,"name.nc",quiet = F,method = "auto",mode="wb"))
    #3loop to download multiple files
  }
  
  
  ####c)Usando motu-client python para descargar data desde marine.copernicus
  ##Esto no servira sino tiene instalado Python junto con el motuclient
  {
    motu.copernicus<-function(user,pass,service.id,product.id,lon.min,lon.max,lat.min,lat.max,
                              date.min,date.max,depth.min,depth.max,out.dir,
                              vars,name.file)
    {
      cod.01<-'python -m motuclient --motu http://nrt.cmems-du.eu/motu-web/Motu '
      cod.02<-paste("--service-id",service.id)
      cod.03<-paste("--product-id",product.id)
      cod.04<-paste("--longitude-min",lon.min)
      cod.05<-paste("--longitude-max",lon.max)
      cod.06<-paste("--latitude-min",lat.min)
      cod.07<-paste("--latitude-max",lat.max)
      cod.08<-paste("--date-min",date.min)
      cod.09<-paste("--date-max",date.max)
      cod.10<-paste("--depth-min",depth.min)
      cod.11<-paste("--depth-max",depth.max)
      cod.12<-paste("--variable",vars,collapse = " ")
      cod.13<-paste("--out-dir",out.dir)
      cod.14<-paste("--out-name",name.file)
      cod.15<-paste("--user",user)
      cod.16<-paste("--pwd",pass)
      
      cod<-paste(cod.01,cod.02,cod.03,cod.04,cod.05,cod.06,cod.07,cod.08,
                 cod.09,cod.10,cod.11,cod.12,cod.13,cod.14,cod.15,cod.16)
      system(cod)
    }
    
    motu.copernicus(user="usuario",
                    pass="password",
                    service.id="MULTIOBS_GLO_PHY_NRT_015_001-TDS",
                    product.id="dataset-armor-3d-nrt-monthly",
                    lon.min= -95,lon.max= -78,
                    lat.min= -10,lat.max= 10,
                    date.min="2020-06-15 00:00:00",
                    date.max="2020-06-15 00:00:00",
                    depth.min=-1,
                    depth.max=150,
                    out.dir="C:/Users/Freddy/Desktop/online_R_course/Charla_20200907_AL/data/",
                    vars="to",
                    name.file="st202006.nc")  
  }
}

####Ejemplo 1: Re- proyectar datos espaciales
{
  library(raster)
  library(rgdal)
  library(maps)
  ###shapefile
  ##Help:
  #shp america del sur
  shp<-readOGR(dsn = ".",layer = "america_sur",encoding = "UTF-8",use_iconv=TRUE)
  new.sr<-"+proj=utm +zone=17 +south +datum=WGS84 +units=m +no_defs +ellps=WGS84 +towgs84=0,0,0"
  shp.2<-spTransform(shp,new.sr)
  writeOGR()
  
  ###raster
  ##Help:
  #use raster: prec201806_TRMM_3B42RT_v7_LA.tif
  r<-raster("prec201806_TRMM_3B42RT_v7_LA.tif")
  new.sr<-"+proj=utm +zone=17 +south +datum=WGS84 +units=m +no_defs +ellps=WGS84 +towgs84=0,0,0"
  r.2<-projectRaster(r,crs = new.sr)
  writeRaster(r.2,"name_r.tif",overwrite=T)
}

####Ejemplo 2: Recortar datos grillados 
{
  ###Usando grid
  {
    ##Help:
    #grid c(-120,-70,-60,30) # Recuadro America Latina
    #use raster prec201806_TRMM_3B42RT_v7.tif
    #function crop
    #writeRaste(r,"name_r.tif")
    r<-raster("prec201806_TRMM_3B42RT_v7.tif")
    rcrop<-crop(r,c(-120,-70,-60,30))
    writeRaster(rcrop,"test.tif")
    plot(rcrop)
    map("world",add=T)
    plot(r)
  }
  
  ###Usando mascara (shapefile)
  {
    ##Help:
    #mask():mask(r,shp) 
    #Use crop() funcion to fix raster's extent: crop(r.mask,extent(shp))
    #Save each raster
    #Loop
    shp<-readOGR(dsn = ".",layer = "america_sur",encoding = "UTF-8",use_iconv=TRUE)
    r<-raster("prec201806_TRMM_3B42RT_v7.tif")
    rmask<-mask(r,shp)
    rmask<-crop(rmask,extent(shp))
    plot(rmask)
    
    shp$PAIS
    for (i in 1:13)
    {
      nx<-shp[i,]
      r.mask<-mask(r,nx)
      r.mask<-crop(r.mask,extent(nx))
      writeRaster(r.mask,"rexample.tif",overwrite=T)
      plot(r.mask)
    }  
  }
}

####Ejemplo 3: Geoprocesamiento con capas vectoriales y raster
{
  ###Guardar cada elemento en un shapefile separado
  {
    ##Help:
    #loop
    shp<-readOGR(dsn = ".",layer = "america_sur",encoding = "UTF-8",use_iconv=TRUE)
    #writeOGR(nx.select,layer = "name_shapefile", ".", driver="ESRI Shapefile",overwrite_layer = T)
    names<-shp$PAIS
    
    for (i in 1:13)
    {
      nx<-shp[i,]
      writeOGR(nx,layer = paste0("shp_",names[i]), ".", driver="ESRI Shapefile",overwrite_layer = T)
    }
  }
  
  ###Interseccion 
  {
    ##Help:
    #intersect(shp.a,shp.b)
    shp.a<-readOGR(dsn = ".",layer = "america_sur",encoding = "UTF-8",use_iconv=TRUE)
    shp.b<-readOGR(dsn = ".",layer = "shapefile_b",encoding = "UTF-8",use_iconv=TRUE)
    shp<-intersect(shp.a,shp.b)
  }
  
  ###Buffer
  {
    library(rgeos)
    ##Help:
    #use shapefile of SA
    #buffer(shp.a,1)
    shp<-readOGR(dsn = ".",layer = "america_sur",encoding = "UTF-8",use_iconv=TRUE)
    shp.buff<-buffer(shp,1)
  }
  
  ###Disssolve
  {
    library(rgeos)
    library(maps)
    ##Help:
    #gUnaryUnion()
    shp<-readOGR(dsn = ".",layer = "america_sur",encoding = "UTF-8",use_iconv=TRUE)
    shp.diss<-gUnaryUnion(shp)
    wrieORG()
  }
  
  ###Interpolacion
  {
    library(raster);library(maps);library(gstat)
    
    #Preparing everthing to interpolate
    shp<-readOGR(dsn = ".",layer = "sst20200807_points",encoding = "UTF-8",use_iconv=TRUE)
    
    r<-raster()
    extent(r)<-extent(shp)
    res(r)<-c(0.05, 0.05)
    
    #Interpolation using inverse distance weighted (IDW)
    gs <- gstat(formula=shp$tsm07aug~1, locations=shp)
    r.idw<-interpolate(r, gs)
    plot(r.idw)
    
    #Interpolation using nearest neighbor method
    gs <- gstat(formula=shp$tsm07aug~1, locations=shp, nmax=5, set=list(idp = 0))
    r.nnm <- interpolate(r, gs)
    plot(r.nnm)
  } 
}

####Ejemplo 4: Manipulando tabla de atributos 
{
  ###help:
  shp<-readOGR(dsn = ".",layer = "nxprovincias",encoding = "UTF-8",use_iconv=TRUE)
  shp$area <- round(area(shp)/1000000,2)
  
  ###check elements in the attributes table
  shp$area
  shp$area[2]
  
  ###View the attributes table
  View(data.frame(shp))
  
  ###classify data with classIntervals()
  {
    ##Help:
    #Use provinces shapefile
    #save shapefile
    #use nxprovincias
    shp<-readOGR(dsn = ".",layer = "nxprovincias",encoding = "UTF-8",use_iconv=TRUE)
    shp$area <- round(area(shp)/1000000,2)
    
    library(classInt)
    shp.ar<-shp$area
    intervals<-classIntervals(shp.ar,n = 3,style = "quantile")
    inter<-NULL
    for (j in 1:length(shp.ar))
    {
      if (shp.ar[j]>=intervals$brks[1] && shp.ar[j]<=intervals$brks[2]) inter[j]<-1
      if (shp.ar[j]>intervals$brks[2] && shp.ar[j]<=intervals$brks[3]) inter[j]<-2
      if (shp.ar[j]>intervals$brks[3] && shp.ar[j]<=intervals$brks[4]) inter[j]<-3
    }
    shp$categ<-inter 
  }     
}

####Ejemplo 5: Mapeo 
{
  ###Mapa basico
  {
    r<-raster("prec201806_TRMM_3B42RT_v7.tif")
    r[r<0]<-0
    
    col.pal<-colorRampPalette(c(rgb(255,255,255,m=255),rgb(32,126,245,m=255),rgb(24,106,94,m=255),rgb(145,196,133,m=255),rgb(241,186,111,m=255),rgb(201,88,74,m=255)))(255)
    
    plot(r,xlim=c(110,140),ylim=c(0,20),col=col.pal,interpolate=T)
    map("world",add=TRUE) 
  }
  
  ###Mapa con mayor grado de personalizacion
  {
    r<-raster("prec201806_TRMM_3B42RT_v7.tif")
    r[r<0]<-0
    keyL<-0
    keyH<-500
    cuts<-seq(keyL,keyH,25)
    col.pal<-colorRampPalette(c(rgb(255,255,255,m=255),rgb(32,126,245,m=255),rgb(24,106,94,m=255),rgb(145,196,133,m=255),rgb(241,186,111,m=255),rgb(201,88,74,m=255)))(length(cuts))
    
    txt.size<-0.7
    r[r<keyL]<-keyL
    r[r>keyH]<-keyH
    
    #plot(r,xlim=c(110,140),ylim=c(0,20),zlim=c(keyL,keyH),axis.args=list(at=seq(keyL,keyH,by=100),labels=seq(keyL,keyH,by=100),cex.axis=1.4*txt.size,font=3,mgp=c(1,0.7,0)),legend.args=list(text="\nmm", side=3, font=2, line=1, cex=(1.2*txt.size)),legend.width=1.2,legend.shrink=1,col=col.pal,interpolate=T,axes=FALSE)
    png("test_rr.png",width = 1200,height = 860,res=100)
    plot(r,xlim=c(110,140),ylim=c(0,20),zlim=c(keyL,keyH),asp=NA,breaks=cuts,axis.args=list(at=seq(keyL,keyH,by=100),labels=seq(keyL,keyH,by=100),cex.axis=1.4*txt.size,font=3,mgp=c(1,0.7,0)),legend.args=list(text="\nmm", side=3, font=2, line=1, cex=(1.2*txt.size)),col=col.pal,axes=FALSE)
    map("world",add=TRUE)
    dev.off()
  }
  
  ###Teaser: Mapeo avanzado
  {
    mbaj<-rgb(56,168,0,m=255) #green
    nr<-rgb(255,255,0,m=255)  #yellow
    malt<-rgb(255,0,0,m=255)  #red
    #Asignacion de colores al shape de la provincia
    pal.col<-NULL
    idx<-which(inter==1);pal.col[idx]<-mbaj
    idx<-which(inter==2);pal.col[idx]<-nr
    idx<-which(inter==3);pal.col[idx]<-malt
    
    library(OpenStreetMap)
    new.sr<-"+proj=utm +zone=17 +south +datum=WGS84 +units=m +no_defs +ellps=WGS84 +towgs84=0,0,0"
    map.ec <- openmap(c(-11.3,-93.7), c(8.1,-74.5),zoom = 5,type = "bing",)          #Ecuador
    map.ec <- openproj(map.ec, projection = new.sr) 
    
    png("better_map.png",width = 900,height = 500,res=100)
    plot(shp)
    plot(map.ec,add=T)
    plot(shp,col=pal.col,add=T)
    title(main="Ecuador's provinces classified by area",font.main=4,cex.main=1,adj=0)
    box()
    dev.off()
  }
}

####Ejemplo 6: Geo-estad?stica: Correlaci?n linea 
{
  ###Correlacion linea espacial
  {
    setwd("C:/Users/Freddy/Desktop/online_R_course/Charla_20200907_AL/data/")
    sst<-stack("sst_200401_201812.nc")
    rr<-stack("rr_200401_201812.nc")
    
    #Uso resample para que tengan las mismas caracteristicas espaciales.
    rr.rs<-resample(rr,sst)
    
    #Uso crop para recortar los datos de precipitacion a mi area de interes
    rr.crop<-crop(rr.rs,c(-76.95833, -69.95833, -5.958333, -0.04166667))
    rr.crop
    
    #sst.crop<-crop(sst,c(-76.95833, -69.95833, -5.958333, -0.04166667))
    #sst.crop
    
    #Uso crop para recortar los datos de sst a mi area de interes
    sst.new<-crop(sst,c(-76.95833-12, -69.95833-12, -5.958333, -0.04166667))
    
    #Como la funcion calc requiere que para hacer calculos las capas raster
    #tienen que estar en el mismo espacio geografico, trasalado la grid de datos
    #a la ubicacion donde estan los datos de precipitacion
    #IMPORTANTE: Los set de datos tienen que tener el mismo numero de filas y 
    #columnas
    extent(sst.new)<-c(-76.95833, -69.95833, -5.958333, -0.04166667)
    
    #Mapa para ver donde estan ubicadas las grids
    library(maps)
    map("world",xlim=c(-94,-70),y=c(-20,20))
    rect(xleft = -76.95833,xright = -69.95833,ybottom = -5.958333,ytop = -0.04166667)
    rect(xleft = -76.95833-12,xright = -69.95833-12,ybottom = -5.958333,ytop = -0.04166667)
    
    #Uno los datos en un solo raster stack
    r.complete <- stack(rr.crop, sst.new)
    
    #Funcion para calcular la correlacion
    cor.fun <- function(vec = NULL) 
    {
      cor(x= vec[1:(length(vec)/2)],y=vec[((length(vec)/2) + 1):length(vec)],use='complete.obs',method = 'spearman')
    }
    
    #Funcion complementaria
    fun.calc<-function(x)
    {
      if (all(is.na(x))) {
        NA_real_
      } else {
        cor.fun(vec = x)
      }
    }
    
    #calculo de la correlacion espacial
    r.cor <- calc(r.complete,fun =fun.calc)
    
    #Grafica rapida
    col.pal<-colorRampPalette(c(rgb(0,4,100,m=255),rgb(9,27,206,m=255),rgb(23,56,236,m=255),rgb(38,89,246,m=255),rgb(48,120,255,m=255),rgb(64,155,255,m=255),rgb(86,189,255,m=255),rgb(118,226,255,m=255),rgb(161,255,255,m=255),rgb(220,255,255,m=255),rgb(255,255,255,m=255),rgb(255,255,175,m=255),rgb(255,227,79,m=255),rgb(255,188,14,m=255),rgb(255,149,0,m=255),rgb(255,112,3,m=255),rgb(255,75,1,m=255),rgb(247,41,0,m=255),rgb(233,19,0,m=255),rgb(200,6,0,m=255),rgb(111,0,0,m=255) ))(255)
    plot(r.cor,zlim=c(-1,1),col=col.pal,axes=F)
  }
}

####Ejemplo 7: Procesamiento de im?genes satelitales Landsat para obtener NDVI
{
  NDVI<-function(dir,shp)
  {
    sr<-'+proj=utm +zone=18 +datum=WGS84 +units=m +no_defs'
    shp<-spTransform(shp,sr)
    
    RED<-list.files(pattern = 'B4')[1]
    NIR<-list.files(pattern = 'B5')[1]
    RED<-raster(RED)
    NIR<-raster(NIR)
    NDVI<-(NIR-RED)/(NIR+RED)
    CROP<-mask(NDVI,shp)
    CROP<-crop(CROP,extent(shp))
    return(CROP)
  }
  
  ##Archivo shp donde se realizara el procesamiento de NDVI
  setwd("C:/Users/Freddy/Desktop/online_R_course/Charla_20200907_AL/data/")
  shp<-readOGR(dsn = ".",layer = "area_estudio",encoding = "UTF-8",use_iconv=TRUE)
  
  ##Leyendo capas raster Landsat
  dir<-"C:/Users/Freddy/Desktop/online_R_course/Charla_20200907_AL/data/landsat/"
  setwd(dir)
  
  ##Calculando NDVI
  r.ndvi<-NDVI(dir,shp)
  
  ##Grafica rapida
  col.pal<-colorRampPalette(c(rgb(203,189,154,m=255),rgb(232,223,194,m=255),rgb(243,246,215,m=255),rgb(178,201,155,m=255),rgb(109,148,93,m=255),rgb(47,100,54,m=255),rgb(9,49,25,m=255),rgb(0,23,13,m=255),rgb(0,7,5,m=255)))(255)
  plot(r.ndvi,zlim=c(-0.9,0.9),col=col.pal)
}